" ==============================================================================
" Plugins
" ==============================================================================
function! AtGoogle()
  return filereadable(glob('$HOME/.vimrc_google'))
endfunction

if AtGoogle()
  source $HOME/.vimrc_google
endif

" Install vim-plug plugins
call plug#begin('~/.vim/plugged')

" Source work-only or home-only plugins
if AtGoogle()
  source $HOME/.vimrc_plugged_google
else
  source $HOME/.vimrc_plugged_home
endif

" ---------------------------------
" bufexplorer
" ---------------------------------
Plug 'jlanzarotta/bufexplorer'
let g:bufExplorerFindActive = 0         " do not go to active window
let g:bufExplorerShowRelativePath = 1   " show relative paths
let g:bufExplorerSortBy = 'fullpath'    " sort by full path
let g:bufExplorerSplitOutPathName = 1   " split the path and file name
let g:bufExplorerVertSize = 20          " new split windows size set by Vim
nnoremap <C-n><C-n> :ToggleBufExplorer<CR>
nnoremap <C-n><C-v> :BufExplorerVerticalSplit<CR>
nnoremap <C-n><C-s> :BufExplorerHorizontalSplit<CR>

" ---------------------------------
" ESFormatter
" ---------------------------------
Plug 'millermedeiros/vim-esformatter'
autocmd FileType javascript nnoremap <silent> <leader>es :Esformatter<CR>

" ------------------------------------
" incsearch.vim
" ------------------------------------
Plug 'haya14busa/incsearch.vim'
map /  <Plug>(incsearch-forward)
map ?  <Plug>(incsearch-backward)
map g/ <Plug>(incsearch-stay)

" ---------------------------------
" UltiSnips
" ---------------------------------
Plug 'SirVer/ultisnips'
Plug 'honza/vim-snippets'
let g:UltiSnipsExpandTrigger = '<leader>e'

" ------------------------------------
" vim-airline
" ------------------------------------
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
let g:airline_theme = 'badwolf'
if !exists('g:airline_symbols')
  let g:airline_symbols = {}
endif
let g:airline_left_sep = ''
let g:airline_left_alt_sep = ''
let g:airline_right_sep = ''
let g:airline_right_alt_sep = ''
let g:airline_symbols.branch = ''
let g:airline_symbols.readonly = ''
let g:airline_symbols.linenr = ''
let g:airline_symbols.maxlinenr = ''
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#left_sep = ' '
let g:airline#extensions#tabline#left_alt_sep = ' '

" ---------------------------------
" vim-session / vim-misc
" ---------------------------------
Plug 'xolox/vim-misc'
Plug 'xolox/vim-session'
let g:session_autoload = 'no'
let g:session_autosave = 'yes'
let g:session_verbose_messages = 0
nnoremap <leader>ss :execute "SaveSession" getcwd()<CR>
nnoremap <leader>os :execute "OpenSession" getcwd()<CR>

" ---------------------------------
" Other plugins
" ---------------------------------
Plug 'chriskempson/base16-vim'
Plug 'jiangmiao/auto-pairs'
Plug 'mattn/emmet-vim'
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-unimpaired'
Plug 'vim-scripts/matchit.zip'

Plug 'sheerun/vim-polyglot'
let g:polyglot_disabled = ['html', 'jsx']


call plug#end()

" ==============================================================================
" Other options
" ==============================================================================

set background=dark
if filereadable(expand("~/.vimrc_background"))
  let base16colorspace=256
  source ~/.vimrc_background
endif
colorscheme base16-onedark


" Override some of base16-onedark colorscheme
hi Comment      ctermfg=243
hi CursorLine               ctermbg=18
hi CursorLineNr ctermfg=243 ctermbg=18
hi LineNr       ctermfg=243 ctermbg=0
hi Macro        ctermfg=5
hi Pmenu        ctermfg=0   ctermbg=7
hi PmenuSel     ctermfg=3   ctermbg=8
hi StatusLine   ctermfg=7   ctermbg=18
hi Todo                     ctermbg=0   cterm=bold

set autoindent          " copy indent from current line when starting new line
set autoread            " reload file if its changed outside of vim
set colorcolumn=81      " display vertical line margin
set completeopt=menu    " 'preview' makes tabbing through YCM sluggish
set expandtab           " enter spaces when tab is pressed
set hidden              " don't unload buffer
set history=1000        " keep last 1000 commands
set hlsearch            " highlight last searched item
set ignorecase          " case insensitive search and substitute
set incsearch           " search as you type
set laststatus=2        " always show status line
set number              " line number
set pastetoggle=<F10>   " toggle paste mode
set relativenumber      " relative number to current line
set ruler               " display row and column of cursor (bottom right)
set cursorline          " highlight line where cursor is
set shiftwidth=2        " number of spaces to use for auto indent
set showcmd             " show partial command in last line of screen
set showmatch           " show matching bracket
set smartcase           " case insensitive when searching all lowercase
set splitbelow          " make split to below
set splitright          " make vsplit to the right
set softtabstop=2       " setting to equal tabstop to use all spaces only
set tabstop=2           " use 2 spaces to represent tab
set wildmenu            " show autocomplete options

" Buffers
nnoremap <leader>t :enew<CR>
nnoremap <leader>w :bd<CR>
nnoremap <leader>wq :bp<bar>bd #<CR>

" Search selected text
vnoremap <leader>s yq/p<CR>

" Make search result appear in the middle of the screen
nnoremap n nzz
nnoremap N Nzz
nnoremap * *zz
nnoremap # #zz
nnoremap g* g*zz
nnoremap g# g#zz

" Clear highlighting
nnoremap <C-l> :noh<CR>

" Copy/paste to/from clipboard
vnoremap <C-c> "+y<CR>
inoremap <C-v> <ESC>:set paste<CR>"+p :set nopaste<CR>

" Move cursor to beginning or EOL
inoremap <C-e> <ESC>A
inoremap <C-a> <ESC>I

" Strip trailing whitespace on save
au FileType cpp,css,go,html,java,javascript au BufWritePre <buffer> :%s/\s\+$//e

" Use // as commentstring
au FileType cpp,java,javascript setlocal commentstring=//\ %s
