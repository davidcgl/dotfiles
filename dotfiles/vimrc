" ==============================================================================
" Plugins
" ==============================================================================
function! AtGoogle()
  return filereadable(glob("$HOME/.at_google"))
endfunction

function! AtGoogleWorkspace()
  return filereadable(glob(getcwd() . "/WORKSPACE"))
endfunction

" Load Glug plugins
if AtGoogle()
  source $HOME/.google.vim
endif

" Install plugins via vim-plug
call plug#begin('~/.vim/plugged')

" ---------------------------------
" bufexplorer
" ---------------------------------
Plug 'jlanzarotta/bufexplorer'
let g:bufExplorerFindActive = 0         " do not go to active window
let g:bufExplorerShowRelativePath = 1   " show relative paths
let g:bufExplorerSortBy = 'name'        " sort by filename
let g:bufExplorerSplitOutPathName = 1   " split the path and file name
let g:bufExplorerVertSize = 20          " new split windows size set by Vim
nnoremap <C-n><C-n> :ToggleBufExplorer<CR>
nnoremap <C-n><C-v> :BufExplorerVerticalSplit<CR>
nnoremap <C-n><C-s> :BufExplorerHorizontalSplit<CR>

" ------------------------------------
" delimitMate
" ------------------------------------
Plug 'Raimondi/delimitMate'
let g:delimitMate_expand_cr = 1
let g:delimitMate_expand_space = 1

" ---------------------------------
" ESFormatter
" ---------------------------------
Plug 'millermedeiros/vim-esformatter'
autocmd FileType javascript nnoremap <silent> <leader>es :Esformatter<CR>

" ------------------------------------
" fzf.vim
" ------------------------------------
Plug 'junegunn/fzf.vim'
set rtp+=~/.fzf/
if AtGoogleWorkspace()
  let $FZF_DEFAULT_COMMAND = 'fzf-g5-list'
endif
nnoremap <C-p><C-p> :Files<CR>
nnoremap <C-p><C-v> :vsplit<CR>:Files<CR>
nnoremap <C-p><C-s> :split<CR>:Files<CR>
nnoremap <C-p><C-b> :Buffers<CR>
nnoremap <C-p><C-f> :BLines<CR>
nnoremap <C-p><C-l> :Lines<CR>

" ------------------------------------
" incsearch.vim
" ------------------------------------
Plug 'haya14busa/incsearch.vim'
map /  <Plug>(incsearch-forward)
map ?  <Plug>(incsearch-backward)
map g/ <Plug>(incsearch-stay)

" ---------------------------------
" searchindex
" ---------------------------------
Plug 'google/vim-searchindex'
let g:searchindex_improved_star = 0

" ---------------------------------
" Syntastic
" ---------------------------------
Plug 'scrooloose/syntastic'
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*
let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_wq = 0
let g:syntastic_javascript_checkers = ['eslint']
let g:syntastic_javascript_eslint_exec = 'eslint'
let g:syntastic_mode_map = {
  \ 'mode': 'passive',
  \ 'active_filetypes': [],
  \ 'passive_filetypes': ['html', 'css'] }
noremap <leader>sc :SyntasticCheck<CR>

" ---------------------------------
" UltiSnips
" ---------------------------------
Plug 'SirVer/ultisnips'
Plug 'honza/vim-snippets'
let g:UltiSnipsExpandTrigger = '<leader>e'

" ------------------------------------
" vim-airline
" ------------------------------------
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
let g:airline_theme = 'badwolf'
if !exists('g:airline_symbols')
  let g:airline_symbols = {}
endif
let g:airline_left_sep = ''
let g:airline_left_alt_sep = ''
let g:airline_right_sep = ''
let g:airline_right_alt_sep = ''
let g:airline_symbols.branch = ''
let g:airline_symbols.readonly = ''
let g:airline_symbols.linenr = ''
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#left_sep = ''
let g:airline#extensions#tabline#left_alt_sep = ''

" ---------------------------------
" vim-session / vim-misc
" ---------------------------------
Plug 'xolox/vim-misc'
Plug 'xolox/vim-session'
let g:session_autoload = 'no'
let g:session_autosave = 'yes'
let g:session_verbose_messages = 0
nnoremap <leader>ss :execute "SaveSession" getcwd()<CR>
nnoremap <leader>os :execute "OpenSession" getcwd()<CR>

" ---------------------------------
" vim-signify
" ---------------------------------
if AtGoogle()
  Plug 'mhinz/vim-signify'
  let g:signify_vcs_list = ['perforce']
  let g:signify_vcs_cmds = {
        \ 'perforce': 'p4 info >& /dev/null && env G4MULTIDIFF=0 P4DIFF=%d p4 diff -dU0 %f'
        \ }
  let g:signify_skip_filename_pattern = ['\.pipertmp.*']
  let g:signify_line_highlight = 1
  let g:signify_disable_by_default = 1
  nnoremap <leader>sg :SignifyToggle<CR>
endif

" ---------------------------------
" YouCompleteMe
" ---------------------------------
if !AtGoogle()
  Plug 'Valloric/YouCompleteMe'
  let g:ycm_autoclose_preview_window_after_completion = 1
  let g:ycm_autoclose_preview_window_after_insertion = 1
  let g:ycm_allow_changing_updatetime = 0 " set my own updatetime
endif

" ---------------------------------
" Other plugins
" ---------------------------------
Plug 'altercation/vim-colors-solarized'
Plug 'mattn/emmet-vim'
Plug 'nathanaelkane/vim-indent-guides'
Plug 'pangloss/vim-javascript'
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-surround'
Plug 'vim-scripts/matchit.zip'

call plug#end()

" ==============================================================================
" Options
" ==============================================================================

set background=dark
colorscheme solarized
hi IncSearch cterm=bold ctermfg=7 ctermbg=5
hi Search cterm=bold ctermfg=0 ctermbg=7

set autoindent          " copy indent from current line when starting new line
set autoread            " reload file if its changed outside of vim
set colorcolumn=81      " display vertical line margin
set expandtab           " enter spaces when tab is pressed
set hidden              " don't unload buffer
set history=1000        " keep last 1000 commands
set hlsearch            " highlight last searched item
set ignorecase          " case insensitive search and substitute
set incsearch           " search as you type
set laststatus=2        " always show status line
set number              " line number
set pastetoggle=<F10>   " toggle paste mode
set relativenumber      " relative number to current line
set ruler               " display row and column of cursor (bottom right)
set shiftwidth=2        " number of spaces to use for auto indent
set showcmd             " show partial command in last line of screen
set showmatch           " show matching bracket
set smartcase           " case insensitive when searching all lowercase
set splitbelow          " make split to below
set splitright          " make vsplit to the right
set softtabstop=2       " setting to equal tabstop to use all spaces only
set tabstop=2           " use 2 spaces to represent tab
set wildmenu            " show autocomplete options
set updatetime=750      " for triggering tern_for_vim on_hold event

" Buffers
nnoremap <leader>t :enew<CR>
nnoremap <leader>] :bnext<CR>
nnoremap <leader>[ :bprevious<CR>
nnoremap <leader>w :bd<CR>
nnoremap <leader>wq :bp<bar>bd #<CR>

" Search selected text
vnoremap <leader>s yq/p<CR>

" Copy/paste to/from clipboard
vnoremap <C-c> "+y<CR>
inoremap <C-v> <ESC>:set paste<CR>"+p :set nopaste<CR>

" Move cursor to beginning or EOL
inoremap <C-e> <ESC>A
inoremap <C-a> <ESC>I

" Clear highlighting
nnoremap <C-l> :noh<CR>

" Strip trailing whitespace on save
au FileType cpp,css,go,html,java,javascript au BufWritePre <buffer> :%s/\s\+$//e

" Use // as commentstring
au FileType cpp,java,javascript setlocal commentstring=//\ %s
